const d = document,
  scrollController = new AbortController(),
  navController = new AbortController(),
  cleanup = () => {
    scrollController.abort(), navController.abort();
  };
function initializeFAQAccordion() {
  const e = d.querySelectorAll(".faq-item");
  e.forEach((e) => {
    const t = e.querySelector(".faq-answer");
    e.hasAttribute("open") ||
      ((t.style.opacity = "0"), (t.style.transform = "translateY(-10px)"));
  }),
    e.forEach((t) => {
      t.addEventListener("click", (a) => {
        if ("summary" === a.target.tagName.toLowerCase()) {
          a.preventDefault();
          const o = t,
            r = o.querySelector(".faq-answer");
          e.forEach((e) => {
            if (e !== o && e.hasAttribute("open")) {
              const t = e.querySelector(".faq-answer");
              (t.style.opacity = "0"),
                (t.style.transform = "translateY(-10px)"),
                setTimeout(() => {
                  e.removeAttribute("open");
                }, 400);
            }
          }),
            o.hasAttribute("open")
              ? ((r.style.opacity = "0"),
                (r.style.transform = "translateY(-10px)"),
                setTimeout(() => {
                  o.removeAttribute("open");
                }, 400))
              : (o.setAttribute("open", ""),
                r.offsetHeight,
                (r.style.opacity = "1"),
                (r.style.transform = "translateY(0)"));
        }
      }),
        t.querySelector("summary").addEventListener("keydown", (a) => {
          const o = Array.from(e),
            r = o.indexOf(t);
          switch (a.key) {
            case "ArrowUp":
              a.preventDefault(), o[r - 1]?.querySelector("summary").focus();
              break;
            case "ArrowDown":
              a.preventDefault(), o[r + 1]?.querySelector("summary").focus();
              break;
            case "Home":
              a.preventDefault(), o[0].querySelector("summary").focus();
              break;
            case "End":
              a.preventDefault(),
                o[o.length - 1]?.querySelector("summary").focus();
          }
        });
    });
}
function initializeContactForm() {
  const e = d.querySelector("#form-scroll");
  if (e) {
    const t = new IntersectionObserver(
      (e) => {
        e.forEach((e) => {
          e.isIntersecting &&
            !window.grecaptcha &&
            (loadRecaptcha(), t.unobserve(e.target));
        });
      },
      { threshold: 0.01 }
    );
    t.observe(e);
  }
}
function initializeHeroBackground() {
  const e = d.querySelector(".hero-component-bg");
  if (e) {
    const t = e.getAttribute("data-setbg");
    e.style.backgroundImage = `url(../../images/${t})`;
  }
}
function handleScrollToForm() {
  if (
    new URLSearchParams(window.location.search).has("message") &&
    ("contacto.php" === page || "contacto" === page)
  ) {
    const e = d.getElementById("form-scroll");
    console.log(e),
      e &&
        ((e.style.scrollMargin = "7rem"),
        e.scrollIntoView({ behavior: "smooth", top: 80 }));
  }
}
function initializeClickioConsent() {
  const e = document.createElement("div");
  document.body.insertBefore(e, document.body.firstChild);
  new MutationObserver((e) => {
    e.forEach((e) => {
      e.addedNodes.length &&
        e.addedNodes.forEach((e) => {
          e.classList &&
            e.classList.contains("cl-consent-node-p") &&
            requestAnimationFrame(() => {
              e.classList.add("loaded");
            });
        });
    });
  }).observe(document.body, { childList: !0, subtree: !0 });
}
d.addEventListener("DOMContentLoaded", () => {
  "use strict";
  const e = d.getElementById("main"),
    t = e ? e.offsetTop : 0,
    a = d.querySelector(".navbar");
  window.addEventListener(
    "scroll",
    () => {
      Math.round(window.scrollY) > t
        ? a.classList.add("past-main", "effect-main")
        : a.classList.remove("past-main");
    },
    { signal: scrollController.signal }
  );
  const o = d.querySelectorAll(".nav-link"),
    r = d.getElementById("navbarCollapse"),
    n = new bootstrap.Collapse(r, { toggle: !1 });
  o.forEach((e) => {
    e.addEventListener(
      "click",
      () => {
        n.hide();
      },
      { signal: navController.signal }
    );
  });
  const s = window.location.pathname.split("/");
  let c = s[s.length - 1];
  const i = d.querySelector('a[href="' + c + '"]');
  "" !== c &&
    "index.php" !== c &&
    (i.classList.add("active-page"), (i.ariaSelected = "true"));
  const l = d.getElementById("back-top");
  l &&
    (window.addEventListener("scroll", () => {
      if (window.scrollY > 1e3) {
        let e = d.body.scrollHeight,
          t = window.scrollY + window.innerHeight;
        (l.style.display = "flex"),
          (l.style.bottom = e - t < 540 ? "80px" : "20px");
      } else l.style.display = "none";
    }),
    l.addEventListener("click", (e) => {
      e.preventDefault(), window.scrollTo({ top: 0, behavior: "smooth" });
    }));
  const m = d.querySelector(".hero-parallax");
  window.addEventListener("scroll", () => {
    const e = window.scrollY;
    m && (m.style.backgroundPositionY = 0.5 * e + "px");
  });
  let p = window.location.pathname.split("/");
  if ("politica-de-privacidad.php" === p[p.length - 1]) {
    d.querySelector(".navbar").style.backgroundColor = "#00909b";
  }
  createMasonryItems();
  ["load", "resize"].forEach((e) => {
    window.addEventListener(e, resizeAllMasonryItems);
  }),
    setTimeout(resizeAllMasonryItems, 100),
    initializeFAQAccordion(),
    initializeContactForm(),
    initializeHeroBackground(),
    handleScrollToForm(),
    initializeClickioConsent(),
    window.addEventListener("unload", cleanup, { once: !0 });
});
const pathName = window.location.pathname.split("/");
let page = pathName[pathName.length - 1];
const galleryItems = [
  {
    type: "large",
    image: "crossfit_arastur_primera_clase.webp",
    category: "Crossfit y Principiantes",
    title: "¿Cómo afrontar mi primera clase de crossfit?",
    link: "blog/como-afrontar-primera-clase-de-crossfit.php",
    date: "2/15/2025",
  },
  {
    type: "instagram",
    category: "Gym & Crossfit",
    title:
      "Sigue nuestras clases en Instagram #crosstraining #functionalfitness",
    link: "https://www.instagram.com/crossfitarastur/?hl=en",
    date: "2/15/2025",
  },
  {
    type: "small",
    image: "blog-4.webp",
    category: "Hostoria & Crossfit",
    title: "Orígenes del Crossfit",
    link: "origenes-del-crossfit.php",
    date: "2/15/2025",
  },
  {
    type: "xls-large",
    image: "crossfit-history.webp",
    category: "Crossfit & Nomenclaturas del Crossfit",
    title: "WOD, box, AMRAP, Time cap… ¿qué quieren decir estas palabras?",
    link: "que-son-wod-box-amrap-time-cap.php",
    date: "2/15/2025",
  },
];
let dynamicGallery =
  "blog.php" === page ? galleryItems : galleryItems.slice(0, 4);
function createMasonryItems() {
  const e = d.getElementById("masonry-container");
  dynamicGallery.forEach((t) => {
    const a = d.createElement("div");
    a.className = "col-lg-4 col-md-6 grid-item masonry-item";
    const o = d.createElement("div");
    (o.className = `blog-item ${t.type}-item`),
      t.image &&
        (o.setAttribute("data-setbg", t.image),
        (o.style.backgroundImage = `url(../images/${t.image})`));
    const r = d.createElement("a");
    (r.href = t.link),
      (r.className = "instagram" === t.type ? "instagram-text" : "blog-text"),
      "instagram" === t.type && (r.target = "_blank");
    const n = d.createElement("div");
    if (((n.className = "categories"), "instagram" === t.type)) {
      const e = d.createElement("p");
      (e.textContent = t.category), n.appendChild(e);
      const a = d.createElement("i");
      (a.className = "fa fa-instagram"), n.appendChild(a);
    } else n.textContent = t.category;
    const s = d.createElement("h5");
    (s.textContent = t.title),
      r.appendChild(n),
      r.appendChild(s),
      o.appendChild(r),
      a.appendChild(o),
      e.appendChild(a);
  });
}
function resizeMasonryItem(e) {
  const t = d.querySelector(".masonry"),
    a = parseInt(window.getComputedStyle(t).getPropertyValue("grid-row-gap")),
    o = parseInt(window.getComputedStyle(t).getPropertyValue("grid-auto-rows")),
    r = e.querySelector(".blog-item"),
    n = Math.ceil((r.getBoundingClientRect().height + a) / (o + a));
  let s = n < 8 ? 10 : n;
  e.style.gridRowEnd = "span " + s;
}
function resizeAllMasonryItems() {
  const e = d.getElementsByClassName("masonry-item");
  for (let t = 0; t < e.length; t++) resizeMasonryItem(e[t]);
}
d.addEventListener("DOMContentLoaded", () => {
  createMasonryItems();
  ["load", "resize"].forEach((e) => {
    window.addEventListener(e, resizeAllMasonryItems);
  }),
    setTimeout(resizeAllMasonryItems, 100);
});
const forms = d.querySelectorAll(".needs-validation");
function loadRecaptcha() {
  const e = document.createElement("script");
  (e.src = `https://www.google.com/recaptcha/api.js?render=${RECAPTCHA_PUBLIC}`),
    document.body.appendChild(e),
    (e.onload = function () {
      grecaptcha.ready(function () {
        document.querySelector("#form-scroll") &&
          grecaptcha
            .execute(RECAPTCHA_PUBLIC, { action: "formulario" })
            .then(function (e) {
              const t = document.getElementById("recaptchaResponse");
              t && (t.value = e);
            });
      });
    });
}
Array.from(forms).forEach((e) => {
  e.addEventListener(
    "submit",
    async (t) => {
      if ((t.preventDefault(), !e.checkValidity()))
        return t.stopPropagation(), void e.classList.add("was-validated");
      try {
        if ("undefined" == typeof grecaptcha)
          throw new Error(
            "reCAPTCHA no está cargado. Por favor, actualice la página."
          );
        const t = await grecaptcha.execute(
            "6Lehe90qAAAAAPEWmVnvUJSDBVOK3j4EfIyNyBjK",
            { action: "formulario" }
          ),
          a = new FormData(e);
        a.append("recaptcha_response", t);
        const o = await fetch("proceso-contacto.php", {
          method: "POST",
          body: a,
        });
        if (!o.ok) throw new Error(`HTTP error! status: ${o.status}`);
        const r = await o.json();
        if (!r.success) throw new Error(r.message || "Error desconocido");
        new bootstrap.Modal(document.getElementById("feedback")).show(),
          e.reset(),
          e.classList.remove("was-validated");
      } catch (e) {
        console.error("Error:", e),
          alert(`Error al enviar el formulario: ${e.message}`);
      }
    },
    !1
  );
});
let date = new Date(),
  time = d.querySelector(".copy-time"),
  year = date.getFullYear();
(time.textContent = year), time.setAttribute("datetime", year);
const daysMap = {
  LUNES: { tabId: "nav-monday-tab", contentId: "nav-monday" },
  MARTES: { tabId: "nav-tuesday-tab", contentId: "nav-tuesday" },
  MIERCOLES: { tabId: "nav-wednesday-tab", contentId: "nav-wednesday" },
  JUEVES: { tabId: "nav-thursday-tab", contentId: "nav-thursday" },
  VIERNES: { tabId: "nav-friday-tab", contentId: "nav-friday" },
  SABADO: { tabId: "nav-saturday-tab", contentId: "nav-saturday" },
};
function setActiveTab() {
  let e;
  switch (new Date().getDay()) {
    case 0:
    case 1:
      e = "LUNES";
      break;
    case 2:
      e = "MARTES";
      break;
    case 3:
      e = "MIERCOLES";
      break;
    case 4:
      e = "JUEVES";
      break;
    case 5:
      e = "VIERNES";
      break;
    case 6:
      e = "SABADO";
  }
  d.querySelectorAll(".nav-link").forEach((e) => {
    e.classList.remove("active"), e.setAttribute("aria-selected", "false");
  }),
    d.querySelectorAll(".tab-pane").forEach((e) => {
      e.classList.remove("show", "active");
    });
  const t = daysMap[e],
    a = d.getElementById(t.tabId),
    o = d.getElementById(t.contentId);
  a &&
    o &&
    (a.classList.add("active"),
    a.setAttribute("aria-selected", "true"),
    o.classList.add("show", "active"));
}
async function fetchSheetData() {
  try {
    const e = await fetch("api.php");
    if (!e.ok) throw new Error("Network response was not ok " + e.statusText);
    const t = await e.json();
    Object.values(daysMap).forEach(({ contentId: e }) => {
      const t = d.querySelector(`#${e} .tab-wrapper`);
      t && (t.innerHTML = "");
    });
    const a = t.values,
      o = a[0].map((e) => e.toUpperCase());
    a.slice(1).forEach((e) => {
      const t = e[0];
      o.slice(1).forEach((a, o) => {
        const r = e[o + 1];
        if (r && daysMap[a]) {
          const e = d.querySelector(`#${daysMap[a].contentId} .tab-wrapper`);
          if (e) {
            const a = d.createElement("div");
            (a.className = "single-box"),
              (a.innerHTML = `\n                          <div class="single-caption text-center">\n                              <div class="caption">\n                                  <span>${t}</span>\n                                  <h3>${r}</h3>\n                              </div>\n                          </div>`),
              e.appendChild(a);
          }
        }
      });
    }),
      setActiveTab();
  } catch (e) {
    console.error("Error fetching data:", e);
  }
}
fetchSheetData(),
  d.addEventListener("DOMContentLoaded", () => {
    const e = d.querySelectorAll(".faq-item");
    e.forEach((e) => {
      const t = e.querySelector(".faq-answer");
      e.hasAttribute("open") ||
        ((t.style.opacity = "0"), (t.style.transform = "translateY(-10px)"));
    }),
      e.forEach((t) => {
        t.addEventListener("click", (a) => {
          if ("summary" === a.target.tagName.toLowerCase()) {
            a.preventDefault();
            const o = t,
              r = o.querySelector(".faq-answer");
            e.forEach((e) => {
              if (e !== o && e.hasAttribute("open")) {
                const t = e.querySelector(".faq-answer");
                (t.style.opacity = "0"),
                  (t.style.transform = "translateY(-10px)"),
                  setTimeout(() => {
                    e.removeAttribute("open");
                  }, 400);
              }
            }),
              o.hasAttribute("open")
                ? ((r.style.opacity = "0"),
                  (r.style.transform = "translateY(-10px)"),
                  setTimeout(() => {
                    o.removeAttribute("open");
                  }, 400))
                : (o.setAttribute("open", ""),
                  r.offsetHeight,
                  (r.style.opacity = "1"),
                  (r.style.transform = "translateY(0)"));
          }
        }),
          t.querySelector("summary").addEventListener("keydown", (a) => {
            const o = Array.from(e),
              r = o.indexOf(t);
            switch (a.key) {
              case "ArrowUp":
                a.preventDefault(), o[r - 1]?.querySelector("summary").focus();
                break;
              case "ArrowDown":
                a.preventDefault(), o[r + 1]?.querySelector("summary").focus();
                break;
              case "Home":
                a.preventDefault(), o[0].querySelector("summary").focus();
                break;
              case "End":
                a.preventDefault(),
                  o[o.length - 1]?.querySelector("summary").focus();
            }
          });
      });
    const t = d.querySelector(".hero-component-bg");
    if (t) {
      const e = t.getAttribute("data-setbg");
      t.style.backgroundImage = `url(../../images/${e})`;
    }
    if (
      new URLSearchParams(window.location.search).has("message") &&
      ("contacto.php" === page || "contacto" === page)
    ) {
      const e = d.getElementById("form-scroll");
      console.log(e),
        e &&
          ((e.style.scrollMargin = "7rem"),
          e.scrollIntoView({ behavior: "smooth", top: 80 }));
    }
  });
const opciones = { day: "numeric", month: "long", year: "numeric" },
  footerBlog = d.querySelector(".footer-blog");
dynamicGallery.forEach((e) => {
  if ("instagram" !== e.type) {
    let t = new Date(e.date),
      a = d.createElement("a"),
      o = d.createElement("h6"),
      r = d.createElement("time"),
      n = d.createElement("span"),
      s = d.createElement("i");
    a.classList.add("fb-item"),
      (a.href = e.link),
      (a.target = "_blank"),
      (o.textContent = e.title),
      (r.dateTime = t),
      n.classList.add("blog-time"),
      s.classList.add("fa", "fa-clock-o", "order-2"),
      (r.innerText = t.toLocaleDateString("es-ES", opciones)),
      n.appendChild(s),
      n.appendChild(r),
      a.appendChild(o),
      a.appendChild(n),
      footerBlog.appendChild(a);
  }
}),
  document.addEventListener("DOMContentLoaded", function () {
    const e = document.createElement("div");
    document.body.insertBefore(e, document.body.firstChild);
    const t = new MutationObserver((e) => {
      e.forEach((e) => {
        e.addedNodes.length &&
          e.addedNodes.forEach((e) => {
            e.classList &&
              e.classList.contains("cl-consent-node-p") &&
              requestAnimationFrame(() => {
                e.classList.add("loaded");
              });
          });
      });
    });
    t.observe(document.body, { childList: !0, subtree: !0 }),
      window.addEventListener(
        "unload",
        () => {
          t.disconnect();
        },
        { once: !0 }
      );
  });
